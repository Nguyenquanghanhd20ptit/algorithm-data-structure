TỔ HỢP SỐ CÓ TỔNG BẰNG X

Bài làm tốt nhất
Cho mảng A[] gồm N số nguyên dương phân biệt và số X. Nhiệm vụ của bạn là tìm phép tổ hợp các số trong mảng A[] có tổng bằng X. Các số trong mảng A[]
có thể được sử dụng nhiều lần. Mỗi tổ hợp các số của mảng A[] được in ra theo thứ tự không giảm các số. Ví dụ với A[] = {2, 4, 6, 8}, X = 8 ta có các tổ hợp các số như sau:

[2, 2, 2, 2], [2, 2, 4], [2, 6], [4, 4], [8].

Input:

Dòng đầu tiên đưa vào số lượng bộ test T.
Những dòng kế tiếp đưa vào các bộ test. Mỗi bộ test gồm hai phần: phần thứ nhất là hai số N và X; dòng tiếp theo đưa vào N số của mmảng A[]; các số được viết cách nhau
một vài khoảng trống.
T, N, X, A[i] thỏa mãn ràng buộc: 1≤T ≤10; 1≤X, A[i]≤100. N ≤ 20.
Output:

Đưa ra kết quả mỗi test theo từng dòng. Mỗi đường tổ hợp được bao bởi cặp ký tự [, ]. Đưa ra -1 nếu không có tổ hợp nào thỏa mãn yêu cầu bài toán.
Input

Output

1
4  8

2  4  6  8

[2 2 2 2] [2 2 4] [2 6] [4 4] [8]

bai lam:
#include<bits/stdc++.h>
using namespace std;
int n,s,k,a[100],b[100];
void inp(){
	cin>>n>>s;
	for(int i=1;i<=n;i++){
		cin>>a[i];
	}
	sort(a+1,a+n+1);
}
void ql( int cnt,int sum){
	if(sum==s){
		k=1;
		cout<<"[";
		for(int i=1;i<cnt-1;i++){
			cout<<b[i]<<" ";
		}
		cout<<b[cnt-1];
		cout<<"]";
	}
	for(int j=1;j<=n;j++){
		if(a[j]+sum<=s && b[cnt-1]<=a[j]){
			b[cnt]=a[j];
			ql(cnt+1,sum+a[j]);
		}
	}
}
int main(){
	int t; cin>>t;
	while(t--){
		inp();
		k=0;
		ql(1,0);
		if(k==0) cout<<-1;
		cout<<endl;
	}
}
