DUYỆT CÂY THEO MỨC

Bài làm tốt nhất
Cho cây nhị phân, nhiệm vụ của bạn là duyệt cây theo Level-order. Phép duyệt level-order trên cây là phép thăm node theo từng mức của cây. 
Ví dụ với cây dưới đây sẽ cho ta kết quả của phép duyệt level-order: 20  8  22  4  12  10  14.



    Input:

Dòng đầu tiên đưa vào số lượng test T.
Những dòng tiếp theo đưa vào các bộ test. Mỗi bộ test gồm 2 dòng: dòng đầu tiên đưa vào số N là số lượng cạnh của cây; 
dòng tiếp theo đưa vào N bộ ba (u, v, x), trong đó u là node cha, v là node con, x= R nếu v là con phải, x=L nếu v là con trái; 
u, v, x được viết cách nhau một vài khoảng trống.
T, N, u, v, thỏa mãn ràng buộc: 1≤T≤100; 1≤N≤103; 1≤u, v≤104;
Output:

Đưa ra kết quả phép duyệt level-order theo từng dòng.
     Ví dụ:

Input

Output

2
2
1 2 R 1 3 L
4
10 20 L 10 30 R 20 40 L 20 60 R

1 3 2

10 20 30 40 60


#include<bits/stdc++.h>
using namespace std;
struct Node{
	int data;
	Node *l;
	Node *r;
	Node(int x){
		data=x;
		l=NULL;
		r=NULL;
	}
};
typedef Node* node;
void tao_node(node &x,int b,char c){
	if(c=='L') x->l=new Node(b);
	if(c=='R') x->r=new Node(b);
}
void tao_tree(node &x,int a,int b,char c){
	if(x==NULL) return;
	if(x->data==a) tao_node(x,b,c);
	tao_tree(x->l,a,b,c);
	tao_tree(x->r,a,b,c);
}
void duyet_lever(node x){
	if(x==NULL) return;
	queue<node> q;
	q.push(x);
	while(!q.empty()){
		node u=q.front(); q.pop();
		cout<<u->data<<" ";
		if(u->l != NULL) q.push(u->l);
		if(u->r != NULL) q.push(u->r);
	}
}
int main(){
	int t; cin>>t;
	while(t--){
		node x=NULL;
		int n; cin>>n;
		for(int i=0;i<n;i++){
			int a,b;  char c;
			cin>>a>>b>>c;
			if(x==NULL){
				x=new Node(a);
				tao_node(x,b,c);
			}
			else{
				tao_tree(x,a,b,c);
			}
		}
		duyet_lever(x);
		cout<<endl;
	}
}
 
