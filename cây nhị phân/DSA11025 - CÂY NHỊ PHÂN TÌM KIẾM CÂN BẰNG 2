CÂY NHỊ PHÂN TÌM KIẾM CÂN BẰNG 2

Bài làm tốt nhất
Hãy xây dựng một cây nhị phân tìm kiếm cân bằng từ dãy số A[] =(a0, a1, .., an-1}. Đưa ra phép duyệt theo thứ tự trước (preorder) 
của cây tìm kiếm cân bằng.  Ví dụ với dãy A[]={40, 28, 45, 38, 33, 15, 25, 20, 23, 35, 30} ta sẽ có phép duyệt theo thứ tự trước của cây 
nhị phân tìm kiếm cân bằng với node gốc là 33 : 33, 25, 20, 15, 23, 28, 30, 40, 38, 35, 45.

     Input:

Dòng đầu tiên đưa vào số lượng bộ test T (T≤100).
Những dòng kế tiếp đưa vào T bộ test. Mỗi bộ test gồm 2 dòng: dòng thứ nhất là số tự nhiên N (N≤106). Dòng tiếp theo là N số của mảng A[].
     Output:

Đưa ra kết quả mỗi test theo từng dòng.
     Ví dụ:

Input

Output

2

11

40  28  45 38  33  15  25  20  23  35  30

10

1  2  3  4  5  6  7  8  9  10

30 23 15 20 25 28 38 33 35 40 45

5 2 1 3 4 8 6 7 9 10

#include<bits/stdc++.h>
using namespace std;
int b[10001];
struct Node{
	int data;
	Node *l;
	Node *r;
	Node(int x){
		data=x;
		l=NULL;
		r=NULL;
	}
};
typedef Node* node;

void them_node(node &a,int x){  // them not vao cay
	if(a==NULL){    // not la goc hoac vi tri can them
		node p=new Node(x);
		a=p;
	}
	else{
		if(x < a->data) them_node(a->l,x);  // nho hon nen tim sang trai
		if(x > a->data) them_node(a->r,x);  // lon hon nen tim sang phai
	}
}

void Build(node &a, int left, int right) {
	if (left >= right)return;
	int mid = (left + right) / 2;
	them_node(a, b[mid]);
    Build(a, left, mid);
    Build(a, mid + 1, right);
}
void duyet_truoc(node a){
	if(a!=NULL){
		cout<<a->data<<" ";
		duyet_truoc(a->l);
		duyet_truoc(a->r);
	}               
}
int main(){
	int t; cin>>t;
	while(t--){
		int n; cin>>n;
		for(int i=0;i<n;i++){
			cin>>b[i];
		}
		sort(b,b+n,greater<>());
		node a=NULL;
		Build(a,0,n);
		duyet_truoc(a);
		cout<<endl;
	}
}
