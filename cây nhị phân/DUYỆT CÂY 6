DUYỆT CÂY 6

Bài làm tốt nhất
Cho cây nhị phân, nhiệm vụ của bạn là duyệt cây theo mức đảo ngược (revese-level-order). Với cây dưới đây sẽ cho ta kết quả của phép duyệt theo mức đảo ngược là : 7 6 5 4 3 2 1.

 

spiral_order

Input:

Dòng đầu tiên đưa vào số lượng test T.
Những dòng tiếp theo đưa vào các bộ test. Mỗi bộ test gồm 2 dòng: dòng đầu tiên đưa vào số N là số lượng cạnh của cây; dòng tiếp theo đưa vào N bộ ba (u, v, x), 
trong đó u là node cha, v là node con, x= R nếu v là con phải, x=L nếu v là con trái; u, v, x được viết cách nhau một vài khoảng trống.
T, N, u, v, thỏa mãn ràng buộc: 1≤T≤100; 1≤N≤103; 1≤u, v≤104;
Output:

Đưa ra kết quả phép duyệt revese-level-order theo từng dòng.
Ví dụ:

 

Input

Output

2
2
1 2 R 1 3 L
4
10 20 L 10 30 R 20 40 L 20 60 R

3 2 1

40 20 30 10

bai lam:
#include<bits/stdc++.h>
using namespace std;
vector<int> v;
struct Node{
	int data;
	Node *l;
	Node *r;
	Node(int x){
		data=x;
		l=NULL;
		r=NULL;
	}
};
typedef Node* node;
void tao_node(node &a,int b,char c){
	if(c=='L') a->l=new Node(b);
	if(c=='R') a->r=new Node(b);
}
void tao_tree(node &x,int a,int b,char c){
	if(x==NULL) return;
	if(x->data==a) tao_node(x,b,c);
	tao_tree(x->l,a,b,c);
	tao_tree(x->r,a,b,c);
}
void duyet_lever(node x){
	if(x==NULL) return;
	queue<node> q;
	q.push(x);
	while(!q.empty()){
		node tmp=q.front();  q.pop();
		v.push_back(tmp->data);
		if(tmp->r != NULL) q.push(tmp->r);
		if(tmp->l != NULL) q.push(tmp->l);
	}
}
int main(){
	int t; cin>>t;
	while(t--){
		int n; cin>>n;
		node x=NULL;
		while(n--){
			int a,b; char c;
			cin>>a>>b>>c;
			if(x==NULL){
				x=new Node(a);
				tao_node(x,b,c);
			}
			else{
				tao_tree(x,a,b,c);
			}
		}
		duyet_lever(x);
		reverse(v.begin(),v.end());
		for(auto x:v){
			cout<<x<<" ";
		}
		v.clear();
		cout<<endl;
	}
}
