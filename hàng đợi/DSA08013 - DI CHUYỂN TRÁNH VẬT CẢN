DI CHUYỂN TRÁNH VẬT CẢN

Bài làm tốt nhất
Cho một bảng kích thước N x N, trong đó có các ô trống ‘.’ và vật cản ‘X’. Các hàng và các cột được đánh số từ 0.

Mỗi bước di chuyển, bạn có thể đi từ ô (x, y) tới ô (u, v) nếu như 2 ô này nằm trên cùng một hàng hoặc một cột, và không có vật cản nào ở giữa.

Cho điểm xuất phát và điểm đích. Bạn hãy tính số bước di chuyển ít nhất?

Input:

Dòng đầu ghi số bộ test (không quá 10). Mỗi test gồm:
Dòng đầu tiên là số nguyên dương N (1 ≤ N ≤ 100).
N dòng tiếp theo, mỗi dòng gồm N kí tự mô tả bảng.
Cuối cùng là 4 số nguyên a, b, c, d với (a, b) là tọa độ điểm xuất phát, (c, d) là tọa độ đích.
Dữ liệu đảm bảo hai vị trí này không phải là ô có vật cản.
 

Output: 

Với mỗi test, in ra một số nguyên là đáp số của bài toán.
 

Ví dụ:

 

Input

Output

1

3

.X.

.X.

...

0 0 0 2

#include<bits/stdc++.h>
using namespace std;
struct node{
	int first,second,cnt;
};
int n,s1,s2,e1,e2;
char a[505][505];
void inp(){
	cin>>n;
	for(int i=0;i<n;i++){
		for(int j=0;j<n;j++){
			cin>>a[i][j];
		}
	}
	cin>>s1>>s2>>e1>>e2;
}
void solve(int i,int j){
	queue<node> q;
	q.push({i,j,0});
	while(!q.empty()){
		node u=q.front(); q.pop();
		int x=u.first,y=u.second,cnt=u.cnt;
		if(x==e1 && y==e2){
			cout<<cnt<<endl;
			return;
		}
		//up
		for(int i=x-1;i>=0;i--){
			if(a[i][y]!='X'){
				q.push({i,y,cnt+1});
				a[i][y]='X';
			}
			else break;
		}
		// down
		for(int i=x+1;i<n;i++){
			if(a[i][y]!='X'){
				q.push({i,y,cnt+1});
				a[i][y]='X';
			}
			else break;
		}
		//left
		for(int i=y-1;i>=0;i--){
			if(a[x][i]!='X'){
				q.push({x,i,cnt+1});
				a[x][i]='X';
			}
			else break;
		}
		//right
		for(int i=y+1;i<n;i++){
			if(a[x][i]!='X'){
				q.push({x,i,cnt+1});
				a[x][i]='X';
			}
			else break;
		}
	}
}
int main(){
	int t; cin>>t;
	while(t--){
		inp();
		solve(s1,s2);
	}
}
 

3
