Chia mảng
Cho mảng các số nguyên A[] gồm N phần tử. Hãy chia mảng số nguyên A[] thành
K tập con khác rỗng sao cho tổng các phần tử của mỗi tập con đều bằng nhau. Mỗi
phần tử thuộc tập con xuất hiện duy nhất một lần trong tất cả các tập con. Ví dụ với
A[] = {2, 1, 4, 5, 6}, K =3 ta có kết quả {2, 4}, {1, 5}, {6}.
Input:
● Dòng đầu tiên đưa vào số lượng bộ test T.
● Những dòng kế tiếp đưa vào các bộ test. Mỗi bộ test gồm hai phần: phần thứ
nhất là hai số N và K; dòng tiếp theo đưa vào N số của mmảng A[]; các số
được viết cách nhau một vài khoảng trống.
● T, N, K, A(i) th*a mãn ràng buộc: 1≤T ≤100+ 1≤N, K≤20, 0≤A(i)≤100.
Output:
● Đưa ra 1 nếu có thể chia tập con thành K tập thỏa mãn yêu cầu bài toán,
ngược lại đưa ra 0.
Input Output
2
5 3
2 1 4 5 6
5 3
2 1 5 5 6

1
0

bai lam:
#include<bits/stdc++.h>
using namespace std;
int n,s,k,a[1001];
bool ok,used[1001]={false};
void inp(){
	cin>>n>>k;
	s=0; ok=false;
	for(int i=1;i<=n;i++){
		cin>>a[i];
		s+=a[i];
	}
}
void ql(int sotap,int sum){
	if(sotap==k){
		ok=true; return;
	}
	if(ok) return;
	for(int i=1;i<=n;i++){
		if(used[i]==false){
			used[i]=true;
			if(sum==s){
				ql(sotap+1,0);
			}
			else if(sum<s){
				ql(sotap,sum+a[i]);
			}
		}
		used[i]=false;
	}
}
void solve(){
	inp();
	int u=s;
	int x=1;
	if(s%k!=0) {
		cout<<0<<endl;
		return;
	}
	s=s/k;
	ql(0,0);
	if(ok==true) cout<<1<<endl;
	else cout<<0<<endl;
}
int main(){
	int t; cin>>t;
	while(t--){
		solve();
	}
}
