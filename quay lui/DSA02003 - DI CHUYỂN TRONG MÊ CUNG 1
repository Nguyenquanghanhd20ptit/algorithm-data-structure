DI CHUYỂN TRONG MÊ CUNG 1

Bài làm tốt nhất
Cho một mê cung bao gồm các khối được biểu diễn như một ma trận nhị phân A[N][N]. Một con chuột đi từ ô đầu tiên góc trái (A[0][0])
đến ô cuối cùng góc phải (A[N-1][N-1]) theo nguyên tắc:

Down (D): Chuột được phép xuống dưới nếu ô dưới nó có giá trị 1.
Right (R): Chuột được phép sang phải dưới nếu ô bên phải nó có giá trị 1.
Hãy đưa ra một hành trình của con chuột trên mê cung. Đưa ra -1 nếu chuột không thể đi đến đích.

                        

Input:

Dòng đầu tiên đưa vào số lượng bộ test T.
Những dòng kế tiếp đưa vào các bộ test. Mỗi bộ test gồm hai phần: phần thứ nhất đưa vào số N là kích cỡ của mê cung; dòng tiếp theo đưa vào ma trận nhị phân
A[N][N].
T, N, A[i][j] thỏa mãn ràng buộc: 1≤T ≤10; 2≤N≤10; 0≤A[i][j] ≤1.
Output:

Đưa ra tất cả đường đi của con chuột trong mê cung theo thứ tự từ điển. Đưa ra -1 nếu chuột không đi được đến đích.
Input

Output

2

4

1  0  0  0

1  1  0  1 

0  1  0  0 

1  1  1  1

5

1 0 0 0 0

1 1 1 1 1

1 1 0 0 1

0 1 1 1 1

0 0 0 1 1

DRDDRR

DDRDRRDR DDRDRRRD DRDDRRDR DRDDRRRD DRRRRDDD

#include<bits/stdc++.h>
using namespace std;
int n,a[1001],b[1001],c[505][505];
string s="DR";
int dx[2]={1,0};
int dy[2]={0,1};
vector<string> v;
void inp(){
	cin>>n;
	for(int i=1;i<=n;i++){
		for(int j=1;j<=n;j++){
			cin>>c[i][j];
		}
	}
	memset(b,0,sizeof(b));
}

void inkq(){
	int i=1,j=1;
	string res="";
	for(int k=1;k<=n*2-2;k++){
		int i1=i+dx[a[k]];
		int j1=j+dy[a[k]];
		if(c[i1][j1]==1){
			res+=s[a[k]];
			i=i1; j=j1;
		}
		else break;
	}
	if(res.length()==n*2-2) v.push_back(res);
}	
void ql(int i){
	for(int j=0;j<=1;j++){
		a[i]=j;
		b[i]=b[i-1]+a[i];
		if(i==n*2-2){
			if(b[i]==n-1){
				inkq();
			}
		}
		else ql(i+1);
		b[i]-=a[i];
	}
}
int main(){
	int t; cin>>t;
	while(t--){
		inp();
		ql(1);
     	if(c[1][1]==0 || c[n][n]==0 || v.size()==0){
	    	cout<<-1<<endl;
    	}
		else{
			sort(v.begin(),v.end());
			for(auto x:v){
				cout<<x<<" ";
			}
			cout<<endl;
		}
		v.clear();
	}
}

 
