PHÂN TÍCH SỐ 2

Bài làm tốt nhất
Cho số nguyên dương N. Nhiệm vụ của bạn là hãy liệt kê tất cả các cách phân tích số tự nhiên N thành tổng các số tự nhiên nhỏ hơn hoặc bằng N.
Phép hoán vị của một cách được xem là giống nhau. Ví dụ với N = 5 ta có kết quả là: (5), (4, 1), (3, 2), (3, 1, 1), (2, 2, 1), (2, 1, 1, 1), (1, 1, 1, 1, 1) .

Input:

Dòng đầu tiên đưa vào số lượng test T.
Những dòng kế tiếp đưa vào các bộ test. Mỗi bộ test là một số tự nhiên N được viết trên một dòng.
T, n thỏa mãn ràng buộc: 1≤T, N≤10.
Output:

Dòng đầu tiên là số lượng cách phân tích thỏa mãn. Dòng tiếp theo liệt kê đáp án theo mẫu ví dụ đã cho.
            Ví dụ:

Input

Output

2

4

5

5

(4) (3 1) (2 2) (2 1 1) (1 1 1 1)

7

(5) (4 1) (3 2) (3 1 1) (2 2 1) (2 1 1 1) (1 1 1 1 1)

#include<bits/stdc++.h>
using namespace std;
int n,a[1001],b[1001];
vector<string> v;
void inp(){
	cin>>n;
	for(int i=1;i<=n;i++){
		a[i]=n-i+1;
	}
}
void ql(int x,int cnt,int sum){
	if(sum==n){
		string res="(";
		for(int i=1;i<cnt-1;i++){
			res+=to_string(b[i])+" ";
		}
		res+=to_string(b[cnt-1])+")";
		v.push_back(res);
	}
	for(int i=x;i<=n;i++){
		if(sum+a[i]<=n){
			b[cnt]=a[i];
			ql(i,cnt+1,sum+a[i]);
		}
	}
}
int main(){
	int t; cin>>t;
	while(t--){
		inp();
		ql(1,1,0);
		if(v.size()==0){
			cout<<-1<<endl;
		}
		else{
			cout<<v.size()<<endl;
			for(auto x:v){
				cout<<x<<" ";
			}
			cout<<endl;
		}
		v.clear();
	}
}
