KIỂM TRA CHU TRÌNH TRÊN ĐỒ THỊ CÓ HƯỚNG VỚI DFS

Bài làm tốt nhất
Cho đồ thị có hướng G=<V, E> được biểu diễn dưới dạng danh sách cạnh. Sử dụng thuật toán DFS, hãy kiểm tra xem đồ thị có tồn tại chu trình hay không?

Input:

Dòng đầu tiên đưa vào T là số lượng bộ test.
Những dòng tiếp theo đưa vào các bộ test. Mỗi bộ test gồm 2 dòng: dòng đầu tiên đưa vào hai số |V|, |E| tương ứng với số đỉnh,  
số cạnh của đồ thị; Dòng tiếp theo đưa vào các bộ đôi uÎV, vÎV tương ứng với một cạnh của đồ thị.
T, |V|, |E| thỏa mãn ràng buộc: 1≤T≤100; 1≤|V|≤103; 1≤|E|≤|V|(|V|-1)/2;
Output:

Đưa ra YES hoặc “NO” kết quả test theo từng dòng tương ứng với đồ thị tồn tại hoặc không tồn tại chu trình.
     Ví dụ:

Input:

Output:

1

6 9  

1 2 2 4 3 1 3 2 3 5 4 3 5 4 5 6 6 4

YES

//(1) dinh da duoc duyet roi ma lai duoc duyet lai => co chu trinh
#include<bits/stdc++.h>
using namespace std;
int n,m,color[1001];
vector<int> v[1001];
void inp(){
	cin>>n>>m;
	for(int i=0;i<m;i++){
		int x,y; cin>>x>>y;
		v[x].push_back(y);
	}
	memset(color,0,sizeof(color));
}
bool dfs(int i){
	color[i]=1;
	for(auto x:v[i]){
		if(color[x]==0){
			if(dfs(x)) return true;
		}
		else{
			if(color[x]==1) return true; //(1)
		}
	}
	color[i]=2;
	return false;
}
int main(){
	int t; cin>>t;
	while(t--){
		inp();
		bool ok=true;
		for(int i=1;i<=n;i++){
			if(color[i]==0){
				if(dfs(i)){
					cout<<"YES"<<endl;
					ok=false;
					break;
				}
			}
		}
		if(ok) cout<<"NO"<<endl;
		for(int i=1;i<=n;i++){
			v[i].clear();
		}
	}
}
