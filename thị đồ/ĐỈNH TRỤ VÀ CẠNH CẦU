#include<bits/stdc++.h>
using namespace std;
int n,m;
vector<int> v[100001];
bool used[100001];
vector<pair<int,int>> edge;
void inp(){
	cin>>n>>m;
	for(int i=0;i<m;i++){
		int x,y; cin>>x>>y;
		v[x].push_back(y);
		v[y].push_back(x);
		edge.push_back({x,y});
	}
}
void dfs1(int i){
	used[i]=true;
	for(auto x:v[i]){
		if(used[x]==false){
			dfs1(x);
		}
	}
}
void dfs2(int i,int s,int e){
	used[i]=true;
	for(auto x:v[i]){
		//loai bo canh s,e
		if((i==s && x==e) || (i==e && x==s)){
			continue;
		}
		if(used[x]==false){
			dfs2(x,s,e);
		}
	}
}
int dinhtru(){
	int ans=0,dem=0;
	memset(used,false,sizeof(used));
	for(int i=1;i<=n;i++){
		if(used[i]==false){
			dem++;
			dfs1(i);
		}
	}
	for(int i=1;i<=n;i++){
		int cnt=0;
		memset(used,false,sizeof(used));
	    used[i]=true;
	    for(int j=1;j<=n;j++){
	    	if(used[j]==false){
	    		cnt++;
	    		dfs1(j);
			}
		}
		if(cnt>dem){
			ans++;
		}
	}
	return ans;
}
int canhcau(){
	int ans=0,dem=0;
	memset(used,false,sizeof(used));
	for(int i=1;i<=n;i++){
		if(used[i]==false){
			dem++;
			dfs1(i);
		}
	}
	for(int i=0;i<edge.size();i++){
		int cnt=0;
		int s=edge[i].first,e=edge[i].second;
		memset(used,false,sizeof(used));
		for(int j=1;j<=n;j++){
			if(used[j]==false){
				cnt++;
				dfs2(j,s,e);
			}
		}
		if(cnt>dem){
			ans++;
    	}
	}	
	return ans;
}
int main(){
	inp();
	cout<<dinhtru()<<" "<<canhcau()<<endl;
}
