chia cắt đồ thị
Cho đồ thị vô hướng G có N đỉnh và M cạnh. Hãy tìm đỉnh u sao cho nếu loại bỏ đỉnh u ra khỏi đồ thị thì đồ thị bị chia cắt thành nhiều thành phần liên
thông nhất.

Input

Dòng đầu ghi số bộ test, mỗi bộ test gồm:

Dòng đầu ghi số N là số đỉnh (1 < N < 100) và số M là số cạnh (M < N*(N-1)/2).
M dòng tiếp theo ghi các cạnh của đồ thị.
Output

Ghi ra thứ tự đỉnh (tính từ 1) thỏa mãn nếu loại bỏ đỉnh đó ra khỏi đồ thị thì sẽ chia cắt ra nhiều thành phần liên thông nhất.

Nếu có nhiều hơn 1 đỉnh thỏa mãn thì in ra thứ tự đỉnh nhỏ nhất.

Nếu không thể chia cắt được đồ thị thì ghi ra 0.

Ví dụ

Input

Output

2

5 5

1 2

1 3

2 3

3 4

3 5
3 


5 7

1 2

1 3

2 3

2 5

3 4

3 5

4 5
0


#include <bits/stdc++.h>
using namespace std;
int n, m;
bool used[10001];
vector<int> v[10001],kq[10001];
void inp(){
	cin >> n >> m;
	for (int i = 0; i < m; i++){
		int x, y;
		cin >> x >> y;
		v[x].push_back(y);
		v[y].push_back(x);
	}
}

void dfs(int i){
	used[i] = true;
	for (auto x : v[i]){
		if (used[x] == false){
			dfs(x);
		}
	}
}

int dinhtru(){
	int ans = 0;
	int cnt = 0;
	memset(used, false, sizeof(used));
	for (int i = 1; i <= n; i++){
		if (used[i] == false){
			cnt++;
			dfs(i);
		}
	}
	for (int i = 1; i <= n; i++){
		memset(used, false, sizeof(used));
		used[i] = true;
		int dem = 0;
		for (int j = 1; j <= n; j++){
			if (used[j] == false){
				dem++;
				dfs(j);
			}
		}
		if (dem > cnt){
			ans=max(ans,dem);
			kq[ans].push_back(i);
		}
	}
	return ans;
}

int main(){
	int t; cin>>t;
	while(t--){
		inp();
		int res=dinhtru();
		if(res==0){
			cout<<0<<endl;
		}
		else{
			sort(kq[res].begin(),kq[res].end());
			cout<<kq[res][0]<<endl;
		}
		for(int i=1;i<=n;i++){
			v[i].clear(); kq[i].clear();
		}
	}
}
