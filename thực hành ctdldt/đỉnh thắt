Cho đồ thị có hướng liên thông G có N đỉnh và M cạnh. Với một cặp đỉnh (u,v), đỉnh thắt của cặp đỉnh này được định nghĩa là một đỉnh mà tất cả
đường đi từ u tới v đều đi qua nó.

Hãy đếm số đỉnh thắt với cặp đỉnh (u,v).

Input

Dòng đầu ghi số bộ test, không quá 100.

Mỗi bộ test bắt đầu với một dòng ghi 4 số N, M, u, v (0< N <= 100; 1 < M <=1000; 1 <= u,v <= N).

Tiếp theo là M dòng ghi các cạnh của đồ thị

Output

Với mỗi bộ test, ghi ra số đỉnh thắt của cặp đỉnh (u,v)

Ví dụ

Input

Output

2

5 7 1 3

1 2

2 4

2 5

3 1

3 2

4 3

5 4
2

4 5 1 4

1 2

1 3

2 3

2 4

3 4
0

#include <bits/stdc++.h>
using namespace std;
int n,m,s,e,dem;
bool a[1001];
vector<int> v[1001];
map<int,int> mp;
void inp(){
	dem=0;
	cin>>n>>m>>s>>e;
	for(int i=0;i<m;i++){
		int x,y; cin>>x>>y;
		v[x].push_back(y);
	}
}
void printpath(vector<int>& path){  
    int size = path.size();
    for (int i = 0; i < size; i++){
        if(mp[path[i]]==dem) mp[path[i]]++;
    }
    dem++;
}

int isNotVisited(int x, vector<int>& path){   // kiem tra xem vector da co dinh chuan bi them vao chua
    int size = path.size();
    for (int i = 0; i < size; i++)
        if (path[i] == x)
            return 0;
    return 1;
}

void findpaths(int s, int e){
    queue<vector<int> > q;
    vector<int> path;
    path.push_back(s);
    q.push(path);
    while (!q.empty()) {
        path = q.front();
        q.pop();
        int last = path[path.size() - 1];
        
        if (last == e) printpath(path);   
        for (auto x:v[last]) {
            if (isNotVisited(x, path)) {
                vector<int> newpath(path); // 1 vector moi giong path.
                newpath.push_back(x);
                q.push(newpath);
            }
        }
    }
}
 
int main(){
	int t; cin>>t;
	while(t--){
		inp();
		findpaths(s,e);
		int cnt=0;
		for(auto x:mp){
			if(x.second==dem && x.first!=s && x.first!=e){
			cnt++;
			}
		}
		cout<<cnt<<endl;
	    mp.clear();
	    for(int i=1;i<=n;i++){
	    	v[i].clear();
		}
	}
}
